@page "/update-profile"
@using BTNX_assignment.Components.ProfileForm
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div id="updateProfile">
<PageTitle>Update Profile</PageTitle>

<h3 class="page-header">Update Profile:</h3>

@if(!IsProfileActive){
    <table class="profile-table">
        <tr class="profile-table-header">
            <th>
                First Name
            </th>
            <th>
                Last Name
            </th>
            <th>
                Email Address
            </th>
            <th>
                Phone Number
            </th>
            <th>
            </th>
        </tr>
        @foreach(Profile profile in Profiles){
            <tr class="profile-table-row">
            <td>
                @profile.FirstName
            </td>
            <td>
                @profile.LastName
            </td>
            <td>
                @profile.Email
            </td>
            <td>
                @profile.PhoneNumber
            </td>
            <td class="profile-actions">
                <button @onclick="@(e => {
                    IsProfileActive = true;
                    ActiveProfile = profile;
                    })">Edit</button>
                <button @onclick="@(async () => {DeleteProfile(profile.Id);})">Delete</button>
            </td>
        </tr>
        }
    </table>
}
else {
    <div>
        <button @onclick=@(e => {
            IsProfileActive=false;
            ActiveProfile=null;
            })>Back</button>
        <ProfileForm SubmitCallback="UpdateActiveProfile" PlaceholderProfile="ActiveProfile"/>
    using System.Configuration.Assemblies;
    </div>
    
}
</div>


@code{
    List<Profile> Profiles = [];
    protected override async Task OnInitializedAsync(){
        var client = HttpClientFactory.CreateClient("ProfileAPI");
        Profiles = await client.GetFromJsonAsync<List<Profile>>("profiles");
        IsLoading = false;
    }
    private bool IsProfileActive { get; set; } = false;
    private bool IsLoading { get; set; } = true;
    Profile? ActiveProfile { get; set; } = null;

    private async void UpdateActiveProfile(Profile profile){
        var client = HttpClientFactory.CreateClient("ProfileAPI");
        var response = await client.PutAsJsonAsync($"profiles/{ActiveProfile.Id}", profile);
        NavigationManager.Refresh(true);
    }

    private async void DeleteProfile(int id){
        var client = HttpClientFactory.CreateClient("ProfileAPI");
        var response = await client.DeleteAsync($"profiles/{id}");
        NavigationManager.Refresh(true);
    }
}