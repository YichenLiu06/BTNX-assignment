@page "/update-profile"
@using BTNX_assignment.Components.ProfileForm
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime


<div id="updateProfile">
<PageTitle>Update Profile</PageTitle>

<h3 class="page-header">Update Profile:</h3>

@if(!IsProfileActive){
    <table class="table table-sm table-hover align-middle" id="profile-table">
        <thead>
            <tr class="">
                <th class="px-3">
                    First Name
                </th>
                <th class="px-3">
                    Last Name
                </th >
                <th class="px-3">
                    Email Address
                </th>
                <th class="px-3">
                    Phone Number
                </th>
                <th>
                </th>
            </tr>
        </thead>
        <tbody class="table-group-divider p-5">
            @foreach(Profile profile in Profiles){
                <tr>
                <td class="px-3">
                    @profile.FirstName
                </td>
                <td class="px-3">
                    @profile.LastName
                </td>
                <td class="px-3">
                    @profile.Email
                </td>
                <td class="px-3">
                    @profile.PhoneNumber
                </td>
                <td class="profile-actions">
                    <button class="btn btn-outline-primary btn-sm m-2 py-1" @onclick="@(async e => {
                        IsProfileActive = true;
                        ActiveProfile = profile;
                        await JSRuntime.InvokeVoidAsync("destroyDataTable", "#profile-table");
                        })">Edit</button>
                    <button class="btn btn-sm btn-outline-primary py-1" @onclick="@(async () => {
                        var response = await DeleteProfile(profile.Id);
                        await JSRuntime.InvokeVoidAsync("clearDataTable", "#profile-table");
                        NavigationManager.Refresh(true);
                        StateHasChanged();
                        })">Delete</button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}
else {
    <div>
        <button class="btn btn-outline-secondary mb-3"@onclick=@(async e => {
            IsProfileActive=false;
            ActiveProfile=null;
            })>Back</button>
        <ProfileForm SubmitCallback="UpdateActiveProfile" PlaceholderProfile="ActiveProfile"/>
    </div>
    
}
</div>


@code{
    string? searchFirstName {get; set;}
    string? searchLastName {get; set;}
    string? searchEmail {get; set;}
    string? searchPhoneNumber {get; set;}
    EditContext EditContext = default!;
    List<Profile> Profiles = [];
    protected override async Task OnInitializedAsync(){
        var client = HttpClientFactory.CreateClient("ProfileAPI");
        Profiles = await client.GetFromJsonAsync<List<Profile>>("profiles");    
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("initializeDataTable", "#profile-table");    
    }
    private bool IsProfileActive { get; set; } = false;
    Profile? ActiveProfile { get; set; } = null;

    private async Task<HttpResponseMessage> UpdateActiveProfile(Profile profile){
        var client = HttpClientFactory.CreateClient("ProfileAPI");
        var response = await client.PutAsJsonAsync($"profiles/{ActiveProfile.Id}", profile);
        return response;
    }

    private async Task<HttpResponseMessage> DeleteProfile(Guid id){
        var client = HttpClientFactory.CreateClient("ProfileAPI");
        var response = await client.DeleteAsync($"profiles/{id}");
        return response;
    }


}